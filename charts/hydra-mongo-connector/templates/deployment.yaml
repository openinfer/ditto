apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mongo-connector.appname" . }}
  namespace: "{{ .Release.Namespace }}"
  labels:
    {{- include "mongo-connector.labels" . | nindent 4 }}
  annotations:
    ditto.live/configmap-hash: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "mongo-connector.appname" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        {{- include "mongo-connector.labels" . | nindent 8 }}
    spec:
      {{ if .Values.serviceAccount.create -}}
      serviceAccountName: {{ .Values.serviceAccount.name | default (include "mongo-connector.appname" .) }}
      {{- end }}
      imagePullSecrets:
        - name: quay.io
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.name }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{ if or .Values.mongodb.collections .Values.volumeMounts}}
          volumeMounts:
          - mountPath: /etc/kafka/ca
            name: kafka-ca
          - mountPath: /etc/kafka/key
            name: kafka-key
          {{ if .Values.mongodb.collections }}
          - name: mongo-connector-config
            mountPath: /etc/hydra-mongo-connector/mongodb_config.json
            subPath: mongodb_config.json
            readOnly: true
          {{ end }}
          {{ with .Values.volumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
          {{ end }}
          ports:
          - name: http
            containerPort: 10080
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          {{ if .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          env:
          - name: RUST_LOG
            value: "{{ .Values.logLevels }}"
          # Health check port and metrics port
          - name: HTTP_PORT
            value: "10080"
          - name: APP_ID
            value: "{{ tpl .Values.appId . }}"
          - name: HYDRA_QUERY_URLS
            value: "{{ tpl .Values.hydraCluster.queryUrl . }}"
          - name: HYDRA_TRANSACTIONS_TOPIC
            value: "{{ tpl .Values.hydraCluster.transactionsTopic . }}"
          - name: KAFKA_BOOTSTRAP_HOST
            value: "{{ tpl .Values.kafka.storeKafkaBootstrapHost . }}"
          - name: HYDRA_CDC_TOPIC
            value: "{{ tpl .Values.kafka.cdcTopic . }}"
          - name: HYDRA_CDC_KAFKA_BOOTSTRAP_HOST
            value: "{{ tpl .Values.kafka.cdcKafkaBootstrapHost . }}"
          - name: KAFKA_CA_PATH
            value: /etc/kafka/ca/ca.crt
          - name: KAFKA_CLIENT_CERT_PATH
            value: /etc/kafka/key/user.crt
          - name: KAFKA_KEY_PATH
            value: /etc/kafka/key/user.key
          - name: KAFKA_KEY_PASS
            valueFrom:
              secretKeyRef:
                key: user.password
                name: {{ include "mongo-connector.appname" . }}
          {{- if and (.Values.consul.httpTokenSecret) (empty .Values.consul.httpToken) }}
          - name: CONSUL_HTTP_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ .Values.consul.httpTokenSecret }}
                key: token
          {{- end }}
          {{- if and (.Values.consul.httpToken) (empty .Values.consul.httpTokenSecret) }}
          - name: CONSUL_HTTP_TOKEN
            value: {{ .Values.consul.httpToken }}
          {{- end }}
          {{- if .Values.consul.httpAddr }}
          - name: CONSUL_HTTP_ADDR
            value: {{ .Values.consul.httpAddr }}
          {{- end }}
          {{- if .Values.consul.httpSslVerify }}
          - name: CONSUL_HTTP_SSL_VERIFY
            value: {{ .Values.consul.httpSslVerify | quote }}
          {{- end }}
          {{ if .Values.mongodb.configPath }}
          - name: MONGODB_CONFIG_PATH
            value: "{{ .Values.mongodb.configPath }}"
          {{ end }}
          {{ if empty .Values.mongodb.secret_name }}
          - name: MONGODB_CONNECTION_STRING
            value: "{{ .Values.mongodb.connection_string }}"
          {{ end }}
          {{ if empty .Values.mongodb.secret_name }}
          - name: MONGODB_DATABASE
            value: "{{ .Values.mongodb.database }}"
          {{ end }}
          {{- with .Values.additionalEnv }}
          {{- tpl (toYaml . ) $ | nindent 10 }}
          {{- end }}
          {{ if .Values.mongodb.secret_name }}
          envFrom:
          - secretRef:
              name: {{ .Values.mongodb.secret_name }}
          {{- end }}
      {{ if or .Values.mongodb.collections .Values.volumes }}
      volumes:
        - name: kafka-ca
          secret:
            defaultMode: 420
            secretName: "{{ .Values.kafka.cdcClusterName }}-cluster-ca-cert"
        - name: kafka-key
          secret:
            defaultMode: 420
            secretName: {{ include "mongo-connector.appname" . }}
        {{ if .Values.mongodb.collections }}
        - name: mongo-connector-config
          configMap:
            name: {{ include "mongo-connector.appname" . }}
        {{ end }}
        {{- with .Values.volumes }}
        {{- tpl (toYaml . ) $ | nindent 8 }}
        {{- end }}
      {{ end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
